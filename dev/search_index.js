var documenterSearchIndex = {"docs":
[{"location":"2D/flux/#Two-dimensional-square-lattice-model-with-flux","page":"Square Lattice w/ Flux","title":"Two-dimensional square lattice model with flux","text":"","category":"section"},{"location":"2D/flux/","page":"Square Lattice w/ Flux","title":"Square Lattice w/ Flux","text":"A two-dimensional example is presented here:","category":"page"},{"location":"2D/flux/","page":"Square Lattice w/ Flux","title":"Square Lattice w/ Flux","text":"julia> function H₀(k, p) # landau\n    k1, k2 = k\n    t = 1\n\n    Hsize = 6\n    Hmat = zeros(ComplexF64, Hsize, Hsize)\n\n    ϕ = 2π * p / Hsize\n\n    for i in 1:Hsize\n        Hmat[i, i] = -2t * cos(k2 - i * ϕ)\n    end\n\n    for i in 1:Hsize-1\n        Hmat[i, i+1] = -t\n        Hmat[i+1, i] = -t\n    end\n\n    Hmat[1, Hsize] = -t * exp(-im * k1)\n    Hmat[Hsize, 1] = -t * exp(im * k1)\n\n    Hmat\nend","category":"page"},{"location":"2D/flux/","page":"Square Lattice w/ Flux","title":"Square Lattice w/ Flux","text":"To calculate the dispersion, run:","category":"page"},{"location":"2D/flux/","page":"Square Lattice w/ Flux","title":"Square Lattice w/ Flux","text":"julia> H(k) = H₀(k, 1)\njulia> showBand(H; value=false, disp=true)","category":"page"},{"location":"2D/flux/","page":"Square Lattice w/ Flux","title":"Square Lattice w/ Flux","text":"(Image: Dispersion of 2D square lattice with flux model)","category":"page"},{"location":"2D/flux/","page":"Square Lattice w/ Flux","title":"Square Lattice w/ Flux","text":"Then we can compute the Chern numbers using calcChern:","category":"page"},{"location":"2D/flux/","page":"Square Lattice w/ Flux","title":"Square Lattice w/ Flux","text":"julia> calcChern(H)","category":"page"},{"location":"2D/flux/","page":"Square Lattice w/ Flux","title":"Square Lattice w/ Flux","text":"The output is:","category":"page"},{"location":"2D/flux/","page":"Square Lattice w/ Flux","title":"Square Lattice w/ Flux","text":"(TopologicalNumber = [1, 1, -2, -2, 1, 1], Total = 0)","category":"page"},{"location":"2D/flux/","page":"Square Lattice w/ Flux","title":"Square Lattice w/ Flux","text":"The first argument TopologicalNumber in the named tuple is an vector that stores the first Chern number for each band.  The vector is arranged in order of bands, starting from the one with the lowest energy. The second argument Total stores the total of the first Chern numbers for each band. Total is a quantity that should always return zero.","category":"page"},{"location":"2D/flux/","page":"Square Lattice w/ Flux","title":"Square Lattice w/ Flux","text":"One-dimensional phase diagram is given by:","category":"page"},{"location":"2D/flux/","page":"Square Lattice w/ Flux","title":"Square Lattice w/ Flux","text":"julia> param = 1:6\njulia> calcPhaseDiagram(H₀, param, \"Chern\"; plot=true)","category":"page"},{"location":"2D/flux/","page":"Square Lattice w/ Flux","title":"Square Lattice w/ Flux","text":"%%%dummy%%% (Image: One-dimensional phase diagram) %%%dummy%%%","category":"page"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"<div class=\"citation canonical\"><dl><dt>[1]</dt>\n<dd>\n<div id=\"Fukui2005Chern\">T. Fukui, Y. Hatsugai and H. Suzuki. <i>Chern Numbers in Discretized Brillouin Zone: Efficient Method of Computing (Spin) Hall Conductances</i>. <a href='https://doi.org/10.1143/JPSJ.74.1674'>J. Phys. Soc. Jpn. <b>74</b>, 1674 (2005)</a>.</div>\n</dd><dt>[2]</dt>\n<dd>\n<div id=\"Shiozaki2023discrete\">K. Shiozaki. <i>A Discrete Formulation of the Kane-Mele ${\\mathbb Z}_2$ Invariant</i>. <a href='https://doi.org/10.48550/arXiv.2305.05615'> (2023)</a>, <a href='https://arxiv.org/abs/2305.05615'>arXiv:2305.05615 [cond-mat]</a>.</div>\n</dd><dt>[3]</dt>\n<dd>\n<div id=\"Hirayama2017\">M. Hirayama, R. Okugawa and S. Murakami. <i>Topological semimetals studied by ab initio calculations</i>. <a href='https://doi.org/10.7566/JPSJ.87.041002'>Journal of the Physical Society of Japan <b>87</b>, 041002 (2017)</a>.</div>\n</dd><dt>[4]</dt>\n<dd>\n<div id=\"Yang2011\">K.-Y. Yang, Y.-M. Lu and Y. Ran. <i>Quantum Hall effects in a Weyl semimetal: Possible application in pyrochlore iridates</i>. <a href='https://doi.org/10.1103/PhysRevB.84.075129'>Physical Review B <b>84</b>, 075129 (2011)</a>.</div>\n</dd><dt>[5]</dt>\n<dd>\n<div id=\"Hirayama2015\">M. Hirayama, R. Okugawa, S. Ishibashi, S. Murakami and T. Miyake. <i>Weyl Node and Spin Texture in Trigonal Tellurium and Selenium</i>. <a href='https://doi.org/10.1103/PhysRevLett.114.206401'>Physical Review Letters <b>114</b>, 206401 (2015)</a>.</div>\n</dd><dt>[6]</dt>\n<dd>\n<div id=\"Du2017\">Y. Du, X. Bo, D. Wang, E.-j. Kan, C.-G. Duan, S. Y. Savrasov and X. Wan. <i>Emergence of topological nodal lines and type-II Weyl nodes in the strong spin-orbit coupling system   InNb  X 2    (  X = S  ,Se)</i>. <a href='https://doi.org/10.1103/PhysRevB.96.235152'>Physical Review B <b>96</b>, 235152 (2017)</a>.</div>\n</dd>\n</dl></div>","category":"page"},{"location":"1D/SSH/#The-Su-Schriffer-Heeger-(SSH)-model","page":"SSH model","title":"The Su-Schriffer-Heeger (SSH) model","text":"","category":"section"},{"location":"1D/SSH/","page":"SSH model","title":"SSH model","text":"Here's a simple example of the SSH Hamiltonian:","category":"page"},{"location":"1D/SSH/","page":"SSH model","title":"SSH model","text":"julia> using TopologicalNumbers\njulia> function H₀(k, p)\n            [\n                0 p[1]+p[2]*exp(-im * k)\n                p[1]+p[2]*exp(im * k) 0\n            ]\n        end","category":"page"},{"location":"1D/SSH/","page":"SSH model","title":"SSH model","text":"The band structure is computed as follows:","category":"page"},{"location":"1D/SSH/","page":"SSH model","title":"SSH model","text":"julia> H(k) = H₀(k, (0.9, 1.0))\njulia> showBand(H; value=false, disp=true)","category":"page"},{"location":"1D/SSH/","page":"SSH model","title":"SSH model","text":"(Image: Band structure of SSH model)","category":"page"},{"location":"1D/SSH/","page":"SSH model","title":"SSH model","text":"Next, we can calculate the winding numbers using calcBerryPhase:","category":"page"},{"location":"1D/SSH/","page":"SSH model","title":"SSH model","text":"julia> calcBerryPhase(H)","category":"page"},{"location":"1D/SSH/","page":"SSH model","title":"SSH model","text":"The output is:","category":"page"},{"location":"1D/SSH/","page":"SSH model","title":"SSH model","text":"(TopologicalNumber = [1, 1], Total = 0)","category":"page"},{"location":"1D/SSH/","page":"SSH model","title":"SSH model","text":"The first argument TopologicalNumber in the named tuple is an vector that stores the winding number for each band.  The vector is arranged in order of bands, starting from the one with the lowest energy. The second argument Total stores the total of the winding numbers for each band (mod 2). Total is a quantity that should always return zero.","category":"page"},{"location":"1D/SSH/","page":"SSH model","title":"SSH model","text":"One-dimensional phase diagram is given by:","category":"page"},{"location":"1D/SSH/","page":"SSH model","title":"SSH model","text":"julia> H(k, p) = H₀(k, (p, 1.0))\n\njulia> param = range(-2.0, 2.0, length=1001)\njulia> calcPhaseDiagram(H, param, \"BerryPhase\"; plot=true)","category":"page"},{"location":"1D/SSH/","page":"SSH model","title":"SSH model","text":"(Image: One-dimensional phase diagram of SSH model)","category":"page"},{"location":"1D/SSH/","page":"SSH model","title":"SSH model","text":"Also, two-dimensional phase diagram is given by:","category":"page"},{"location":"1D/SSH/","page":"SSH model","title":"SSH model","text":"julia> param = range(-2.0, 2.0, length=101)\njulia> calcPhaseDiagram(H₀, param, param, \"BerryPhase\"; plot=true)","category":"page"},{"location":"1D/SSH/","page":"SSH model","title":"SSH model","text":"(Image: Two-dimensional phase diagram of SSH model)","category":"page"},{"location":"lib/public/#Public","page":"Public","title":"Public","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"Modules = [TopologicalNumbers]\nInternal = false","category":"page"},{"location":"lib/public/#TopologicalNumbers.BHZ-Union{Tuple{T2}, Tuple{T1}, Tuple{T1, T2}} where {T1<:Union{Tuple, AbstractVector}, T2<:Union{Tuple, AbstractVector}}","page":"Public","title":"TopologicalNumbers.BHZ","text":"Hamiltonian of the Bernevig–Hughes–Zhang (BHZ) model.\n\n BHZ(k::T1, p::T2) where {T1<:Union{AbstractVector,Tuple}, T2<:Union{AbstractVector,Tuple}}\n\nArguments\n\nk::T1: two-dimensional wavenumber k.\np::T2: parameters defined as below.\n\nDefinition\n\nHamiltonian of the BHZ model is defined as\n\nH(k)=beginpmatrix\n    h_0(bmk)+h_3(bmk)   0                             h_5(bmk)-ih_4(bmk)  0                            \n    0                             h_0(bmk)-h_3(bmk)   0                             h_5(bmk)-ih_4(bmk) \n    h_5(bmk)+ih_4(bmk)  0                             h_0(bmk)-h_3(bmk)   0                            \n    0                             h_5(bmk)+ih_4(bmk)  0                             h_0(bmk)+h_3(bmk)\nendpmatrix\n\nbeginalign*\n     h_0(bmk)=-(t_ss-t_pp)(cos(k_1)+cos(k_2))+frac(epsilon_s+epsilon_p)2 \n     h_3(bmk)=2t_spsin(k_2) \n     h_4(bmk)=2t_spsin(k_1) \n     h_5(bmk)=-(t_ss+t_pp)(cos(k_1)+cos(k_2))+frac(epsilon_s-epsilon_p)2\nendalign*\n\nwhere,,,\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.Flux2d-Union{Tuple{T2}, Tuple{T1}, Tuple{T1, T2}} where {T1<:Union{Tuple, AbstractVector}, T2<:Union{Tuple, AbstractVector}}","page":"Public","title":"TopologicalNumbers.Flux2d","text":"Hamiltonian of the two-dimensional square lattice with flux model.\n\n Flux2d(k::T1, p::T2) where {T1<:Union{AbstractVector,Tuple}, T2<:Union{AbstractVector,Tuple}}\n\nArguments\n\nk::T1: one-dimensional wavenumber k.\np::T2: parameters defined as below.\n\nDefinition\n\nHamiltonian of the two-dimensional square lattice with flux model is defined as\n\nH(k)=beginpmatrix\n    -2tcos(k_2-2pi pfrac1q)  -t                                0       0   cdots                                e^-ik_1           \n    -t                                -2tcos(k_2-2pi pfrac2q)  -t      0   cdots                                0                     \n    0                                 -t                                ddots  -t  cdots                                vdots                \n    vdots                            vdots                                    -t  -2tcos(k_2-2pi pfrac(q-1)q)  -t                    \n    e^ik_1                        0                                 cdots  0   -t                                    -2tcos(k_2-2pi p)\nendpmatrix\n\nwhere,,,\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.Haldane-Union{Tuple{T2}, Tuple{T1}, Tuple{T1, T2}} where {T1<:Union{Tuple, AbstractVector}, T2<:Union{Tuple, AbstractVector}}","page":"Public","title":"TopologicalNumbers.Haldane","text":"Hamiltonian of the Haldane model.\n\n Haldane(k::T1, p::T2) where {T1<:Union{AbstractVector,Tuple}, T2<:Union{AbstractVector,Tuple}}\n\nArguments\n\nk::T1: two-dimensional wavenumber k.\np::T2: parameters defined as below.\n\nDefinition\n\nHamiltonian of the Haldane model is defined as\n\nH(bmk)=beginpmatrix\n    h_0(bmk)+h_3(bmk)   h_1(bmk)-ih_2(bmk) \n    h_1(bmk)+ih_2(bmk)  h_0(bmk)-h_3(bmk)\nendpmatrix\n\nbeginalign*\n     h_0(bmk)=2Kcos(phi)(sin(k_1)+sin(k_2)+sin(k_1+k_2)) \n     h_1(bmk)=-J(1+cos(k_1)+cos(k_2)) \n     h_2(bmk)=-J(-sin(k_1)+sin(k_2)) \n     h_3(bmk)=M+2Ksin(phi)(sin(k_1)+sin(k_2)-sin(k_1+k_2))\nendalign*\n\nwhere,,,\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.KaneMele-Union{Tuple{T2}, Tuple{T1}, Tuple{T1, T2}} where {T1<:Union{Tuple, AbstractVector}, T2<:Union{Tuple, AbstractVector}}","page":"Public","title":"TopologicalNumbers.KaneMele","text":"Hamiltonian of the Kane–Mele model.\n\n KaneMele(k::T1, p::T2) where {T1<:Union{AbstractVector,Tuple}, T2<:Union{AbstractVector,Tuple}}\n\nArguments\n\nk::T1: two-dimensional wavenumber k.\np::T2: parameters defined as below.\n\nDefinition\n\nHamiltonian of the Kane–Mele model is defined as\n\nH(k)=beginpmatrix\n    h_3(bmk)                 0                             h_5(bmk)-ih_4(bmk)  0                            \n    0                             -h_3(bmk)                0                             h_5(bmk)-ih_4(bmk) \n    h_5(bmk)+ih_4(bmk)  0                             -h_3(bmk)                0                            \n    0                             h_5(bmk)+ih_4(bmk)  0                             h_3(bmk)\nendpmatrix\n\nbeginalign*\n     h_3(bmk)=2lambda_mathrmSO(sin(k_1)-sin(k_2)-sin(k_1-k_2)) \n     h_4(bmk)=-t(sin(k_1)+sin(k_2)) \n     h_5(bmk)=-t(cos(k_1)+cos(k_2)+1)\nendalign*\n\nwhere,,,\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.KitaevChain-Union{Tuple{T2}, Tuple{T1}, Tuple{T1, T2}} where {T1<:Real, T2<:Union{Tuple, AbstractVector}}","page":"Public","title":"TopologicalNumbers.KitaevChain","text":"Hamiltonian of the Kitaev chain model.\n\n KitaevChain(k::T1, p::T2) where {T1<:Real, T2<:Union{AbstractVector,Tuple}}\n\nArguments\n\nk::T1: one-dimensional wavenumber k.\np::T2: parameters defined as below.\n\nDefinition\n\nHamiltonian of the Kitaev chain model is defined as\n\nH(k)=beginpmatrix\n    -mu-2tcos(k)    2iDeltasin(k) \n    -2iDeltasin(k)  mu+2tcos(k)\nendpmatrix\n\nwhere,,,\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.KitaevHoneycomb-Union{Tuple{T2}, Tuple{T1}, Tuple{T1, T2}} where {T1<:Union{Tuple, AbstractVector}, T2<:Union{Tuple, AbstractVector}}","page":"Public","title":"TopologicalNumbers.KitaevHoneycomb","text":"Hamiltonian of the Kitaev honeycomb model.\n\n KitaevHoneycomb(k::T1, p::T2) where {T1<:Union{AbstractVector,Tuple}, T2<:Union{AbstractVector,Tuple}}\n\nArguments\n\nk::T1: two-dimensional wavenumber k.\np::T2: parameters defined as below.\n\nDefinition\n\nHamiltonian of the Kitaev honeycomb model is defined as\n\nH(bmk)=beginpmatrix\n    h_3(bmk)                 h_1(bmk)-ih_2(bmk) \n    h_1(bmk)+ih_2(bmk)  -h_3(bmk)\nendpmatrix\n\nbeginalign*\n     h_1(bmk)=-kappa(sin(k_2)-sin(k_1)+sin(k_1-k_2)) \n     h_2(bmk)=K(sin(k_1)+sin(k_2)) \n     h_3(bmk)=K(cos(k_1)+cos(k_2)+1)\nendalign*\n\nwhere,,,\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.SSH-Union{Tuple{T2}, Tuple{T1}, Tuple{T1, T2}} where {T1<:Real, T2<:Union{Tuple, AbstractVector}}","page":"Public","title":"TopologicalNumbers.SSH","text":"Hamiltonian of the Su-Schrieffer-Heeger model.\n\n SSH(k::T1, p::T2) where {T1<:Real, T2<:Union{AbstractVector,Tuple}}\n\nArguments\n\nk::T1: one-dimensional wavenumber k.\np::T2: parameters defined as below.\n\nDefinition\n\nHamiltonian of the Su-Schrieffer-Heeger model is defined as\n\nH(k)=beginpmatrix\n    0                  t_1+t_2e^-ik \n    t_1+t_2e^ik  0\nendpmatrix\n\nwhere,,,\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.ThoulessPump-Union{Tuple{T2}, Tuple{T1}, Tuple{T1, T2}} where {T1<:Union{Tuple, AbstractVector}, T2<:Union{Tuple, AbstractVector}}","page":"Public","title":"TopologicalNumbers.ThoulessPump","text":"Hamiltonian of the Thouless pumping model.\n\n ThoulessPump(k::T1, p::T2) where {T1<:Union{AbstractVector,Tuple}, T2<:Union{AbstractVector,Tuple}}\n\nArguments\n\nk::T1: two-dimensional wavenumber k.\np::T2: parameters defined as below.\n\nDefinition\n\nHamiltonian of the Thouless pumping model is defined as\n\nH(k)=\n\nwhere,,,\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.calcBerryFlux-Tuple{Function, Vector{Int64}}","page":"Public","title":"TopologicalNumbers.calcBerryFlux","text":"Calculate the Berry flux in the two-dimensional case with reference to Fukui-Hatsugai-Suzuki method [1].\n\ncalcBerryFlux(Hamiltonian::Function, n::Vector{Int64}; N::Int=51, gapless::Real=0.0, rounds::Bool=true)\n\nArguments\n\nHamiltionian::Function: the Hamiltonian matrix with one-dimensional wavenumber k as an argument.\nn::Vector{Int64}: The wavenumber(2pi nN) when calculating Berry flux.\nN::Int=51: The number of meshes when discretizing the Brillouin Zone. It is preferable for N to be an odd number to increase the accuracy of the calculation.\ngapless::Real: The threshold that determines the state to be degenerate. Coarsening the mesh(N) but increasing gapless will increase the accuracy of the calculation.\nrounds::Bool=true: An option to round the value of the topological number to an integer value. The topological number returns a value of type Int when true, and a value of type Float when false.\n\nDefinition\n\nThe Berry flux at the wavenumber bmk of the nth band F_n(bmk) is defined by\n\nF_n(bmk)=f_n(bmk)-df_n(bmk)\n\nf_n(bmk)=frac12pimathrmImleftmathrmLogleftU_n1(bmk)U_n2(bmk+bme_1)U_n1^*(bmk+bme_2)U_n1^*(bmk)rightright\n\ndf_n(bmk)=frac12pimathrmImleftmathrmLogU_n1(bmk)+mathrmLogU_n2(bmk+bme_1)-mathrmLogU_n1(bmk+bme_2)-mathrmLogU_n1(bmk)right\n\nU_ni(bmk) is the link variable at wavenumber bmk. bme_i is the unit vector.\n\nU_ni(bmk)=braketPsi_n(bmk)Psi_n(bmk+bme_i)\n\nketPsi_n(bmk) is the wave function of the nth band.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.calcBerryPhase-Tuple{Function}","page":"Public","title":"TopologicalNumbers.calcBerryPhase","text":"Calculate the winding numbers in the one-dimensional case.\n\ncalcBerryPhase(Hamiltonian::Function; N::Int=51, gapless::Real=0.0, rounds::Bool=true)\n\nArguments\n\nHamiltonian::Function: the Hamiltonian matrix function with one-dimensional wavenumber k as an argument.\nN::Int: the number of meshes when discretizing the Brillouin Zone. It is preferable for N to be an odd number to increase the accuracy of the calculation.\ngapless::Real: the threshold that determines the state to be degenerate. Coarsening the mesh(N) but increasing gapless will increase the accuracy of the calculation.\nrounds::Bool: an option to round the value of the topological number to an integer value. The topological number returns a value of type Int when true, and a value of type Float when false.\n\nDefinition\n\nThe Berry phase of the nth band nu_n is defined by\n\nnu_n=frac1pisum_kinmathrmBZU_n(k)\n\nThe range mathrmBZ(Brillouin Zone) is kin02pi. U_ni(k) is the link variable at wavenumber k. e_1 is the unit vector.\n\nU_n(k)=braketPsi_n(k)Psi_n(k+e_1)\n\nketPsi_n(k) is the wave function of the nth band.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.calcChern-Tuple{Function}","page":"Public","title":"TopologicalNumbers.calcChern","text":"Calculate the first Chern numbers in the two-dimensional case with reference to Fukui-Hatsugai-Suzuki method [1].\n\ncalcChern(Hamiltonian::Function; N::Int=51, gapless::Real=0.0, rounds::Bool=true)\n\nArguments\n\nHamiltionian::Function: The Hamiltonian matrix with two-dimensional wavenumber k as an argument.\nN::Int=51: The number of meshes when discretizing the Brillouin Zone. It is preferable for N to be an odd number to increase the accuracy of the calculation.\ngapless::Real: The threshold that determines the state to be degenerate. Coarsening the mesh(N) but increasing gapless will increase the accuracy of the calculation.\nrounds::Bool=true: An option to round the value of the topological number to an integer value. The topological number returns a value of type Int when true, and a value of type Float when false.\n\nDefinition\n\nThe first Chern number of the nth band nu_n is defined by\n\nnu_n=frac12pisum_bmkinmathrmBZmathrmImleftmathrmLogleftU_n1(bmk)U_n2(bmk+bme_1)U_n1^*(bmk+bme_2)U_n1^*(bmk)rightright\n\nThe range mathrmBZ(Brillouin Zone) is bmkin02pi^2. U_ni(bmk) is the link variable at wavenumber bmk. bme_i is the unit vector.\n\nU_ni(bmk)=braketPsi_n(bmk)Psi_n(bmk+bme_i)\n\nketPsi_n(bmk) is the wave function of the nth band.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.calcChernSurface-Tuple{Function, String}","page":"Public","title":"TopologicalNumbers.calcChernSurface","text":"calcChernSurface(H::Function, kn::String; kn_mesh::Int=51, N::Int=51, gapless::Real=0.0, rounds::Bool=true, plot::Bool=false)\n\nArguments\n\nHamiltionian::Function: The Hamiltonian matrix with three-dimensional wavenumber k as an argument.\nkn::String: Compute the Chern number of the plane perpendicular to the \"kn\" direction in Brillouin zone (\"k1\", \"k2\", \"k3\").\nkn_mesh::T: Number of mesh in \"kn\" direction.\nN::Int=51: The number of meshes when discretizing the Brillouin Zone. It is preferable for N to be an odd number to increase the accuracy of the calculation.\ngapless::Real: The threshold that determines the state to be degenerate. Coarsening the mesh(N) but increasing gapless will increase the accuracy of the calculation.\nrounds::Bool=true: An option to round the value of the topological number to an integer value. The topological number returns a value of type Int when true, and a value of type Float when false.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.calcPhaseDiagram-Union{Tuple{T2}, Tuple{T1}, Tuple{Function, T1, T2, String}} where {T1<:(AbstractVector), T2<:(AbstractVector)}","page":"Public","title":"TopologicalNumbers.calcPhaseDiagram","text":"calcPhaseDiagram(H::Function, param_range1::T, param_range2::T, alg::String; N::Int=51, gapless::Real=0.0, rounds::Bool=true, plot::Bool=false) where {T<:AbstractVector}\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.calcPhaseDiagram-Union{Tuple{T}, Tuple{Function, T, String}} where T<:(AbstractVector)","page":"Public","title":"TopologicalNumbers.calcPhaseDiagram","text":"calcPhaseDiagram(H::Function, param_range::T, alg::String; N::Int=51, gapless::Real=0.0, rounds::Bool=true, plot::Bool=false) where {T<:AbstractVector}\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.calcWeylNode-Tuple{Function, Vector{Int64}}","page":"Public","title":"TopologicalNumbers.calcWeylNode","text":"Calculate the Weyl node in the three-dimensional case with reference to Fukui-Hatsugai-Suzuki method [1].\n\ncalcWeylNode(Hamiltonian::Function, n::Vector{Int64}; N::Int=51, gapless::Real=0.0, rounds::Bool=true)\n\nArguments\n\nHamiltionian::Function: the Hamiltonian matrix with three-dimensional wavenumber k as an argument.\nn::Vector{Int64}: The wavenumber(2pibmnN) when calculating Weyl node.\nN::Int=51: The number of meshes when discretizing the Brillouin Zone. It is preferable for N to be an odd number to increase the accuracy of the calculation.\ngapless::Real: The threshold that determines the state to be degenerate. Coarsening the mesh(N) but increasing gapless will increase the accuracy of the calculation.\nrounds::Bool=true: An option to round the value of the topological number to an integer value. The topological number returns a value of type Int when true, and a value of type Float when false.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.calcZ2-Tuple{Function}","page":"Public","title":"TopologicalNumbers.calcZ2","text":"Calculate the mathbbZ_2 numbers in the two-dimensional case with reference to Shiozaki method [2].\n\ncalcZ2(Hamiltonian::Function; N::Int=50, rounds::Bool=true, TR::Bool=false)\n\nArguments\n\nHamiltonian::Function is a matrix with one-dimensional wavenumber k as an argument.\nN::Int is the number of meshes when discretizing the Brillouin Zone. It is preferable for N to be an odd number to increase the accuracy of the calculation.\nrounds::Bool is an option to round the value of the topological number to an integer value. The topological number returns a value of type Int when true, and a value of type Float when false.\n\nDefinition\n\nThe mathbbZ_2 number of the 2nth (and 2n-1th) band nu_n is defined by\n\nnu_n=F_n-left(P_n(0)-P_n(pi)right)\n\nF_n is the Berry flux of the nth band in the mathrmBZ. The range mathrmBZ is bmkin02pitimes0pi half of BZ(Brillouin Zone).\n\nF_n=frac12pisum_bmkinmathrmBZmathrmImleftmathrmLogleftU_n1(bmk)U_n2(bmk+bme_1)U_n1^*(bmk+bme_2)U_n1^*(bmk)rightright\n\nP_n(k_2) is the time-reversal polarization at wavenumber k_2.\n\nP_n(k_2)=frac12pifracmathrmPfomega(0k_2)mathrmPfomega(pik_2)sum_k_1=0^pi-e_1U_n1(bmk)\n\nU_ni(bmk) is the link variable at wavenumber bmk. bme_i is the unit vector.\n\nU_ni(bmk)=braketPsi_n(bmk)Psi_n(bmk+bme_i)\n\nketPsi_n(bmk) is the wave function of the 2nth (and 2n-1th) band. omega(bmk) is the unitary matrix given by\n\nomega(bmk)=braPsi(-bmk)TketPsi(bmk)\n\nT is the time-reversal operator.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.plot1D-Tuple{NamedTuple}","page":"Public","title":"TopologicalNumbers.plot1D","text":"plot1D(result::NamedTuple; labels::Bool=true, png::Bool=false, pdf::Bool=false, svg::Bool=false, filename::String=\"phaseDiagram\")\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.plot1D-Union{Tuple{T2}, Tuple{T1}, Tuple{T1, T2}} where {T1<:(AbstractMatrix), T2<:(AbstractVector)}","page":"Public","title":"TopologicalNumbers.plot1D","text":"plot1D(nums::T1, param_range::T2; labels::Bool=true, disp::Bool=true, png::Bool=false, pdf::Bool=false, svg::Bool=false, filename::String=\"phaseDiagram\") where {T1<:AbstractMatrix,T2<:AbstractVector}\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.plot2D-Tuple{NamedTuple}","page":"Public","title":"TopologicalNumbers.plot2D","text":"plot2D(result::NamedTuple; labels::Bool=true, png::Bool=false, pdf::Bool=false, svg::Bool=false, filename::String=\"phaseDiagram\")\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.plot2D-Union{Tuple{T3}, Tuple{T2}, Tuple{T1}, Tuple{T1, T2, T3}} where {T1<:AbstractArray, T2<:(AbstractVector), T3<:(AbstractVector)}","page":"Public","title":"TopologicalNumbers.plot2D","text":"plot2D(nums::T1, param_range1::T2, param_range2::T3; labels::Bool=true, disp::Bool=true, png::Bool=false, pdf::Bool=false, svg::Bool=false, filename::String=\"phaseDiagram\") where {T1<:AbstractArray,T2<:AbstractVector,T3<:AbstractVector}\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#TopologicalNumbers.showBand-Tuple{Function}","page":"Public","title":"TopologicalNumbers.showBand","text":"Drawing the band structure of the Hamiltonian.\n\nshowBand(Hamiltonian::Function; N::Int=51, labels::Bool=true, value::Bool=true, disp::Bool=false, png::Bool=false, pdf::Bool=false, svg::Bool=false, filename::String=\"Band\")\n\nArguments\n\nHamiltonian::Function: the Hamiltonian matrix function of wave number bm k.\nN::Int: the number of divisions in the wave number space.\nlabels::Bool: whether to display the labels of the figure.\nvalue::Bool: whether to output the values of the wave number and the energy in the matrix form.\ndisp::Bool: whether to display the figure.\npng::Bool: whether to save the figure as a PNG file.\npdf::Bool: whether to save the figure as a PDF file.\nsvg::Bool: whether to save the figure as a SVG file.\nfilename::String: the name of the output file.\n\n\n\n\n\n\n\n","category":"method"},{"location":"examples_old/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples_old/#One-dimensional-case","page":"Examples","title":"One-dimensional case","text":"","category":"section"},{"location":"examples_old/#The-Su-Schriffer-Heeger-(SSH)-model","page":"Examples","title":"The Su-Schriffer-Heeger (SSH) model","text":"","category":"section"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"Here's a simple example of the SSH Hamiltonian:","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"julia> using TopologicalNumbers\njulia> function H(k) # set SSH Hamiltonian function of wavenumber k\n    g = 0.9\n    \n    [\n        0 g+exp(-im*k)\n        g+exp(im*k) 0\n    ]\nend","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"The band structure is computed as follows:","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"julia> showBand(H; value=false, disp=true)","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"(Image: Band structure of SSH model)","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"In this case, 1 signifies the dimension of the wavenumber space.","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"Next, we can calculate the winding numbers using calcBerryPhase:","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"julia> calcBerryPhase(H)","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"The output is:","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"(TopologicalNumber = [1, 1], Total = 0)","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"The first argument TopologicalNumber in the named tuple is an vector that stores the winding number for each band.  The vector is arranged in order of bands, starting from the one with the lowest energy. The second argument Total stores the total of the winding numbers for each band (mod 2). Total is a quantity that should always return zero.","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"One-dimensional phase diagram is given by:","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"julia> function H0(k, p)\n            [\n                0 p[1]+p[2]*exp(-im * k)\n                p[1]+p[2]*exp(im * k) 0\n            ]\n        end\njulia> H(k, p) = H0(k, (p, 1.0))\n\njulia> param = range(-2.0, 2.0, length=1001)\njulia> calcPhaseDiagram(H, param, \"BerryPhase\"; plot=true)","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"(Image: One-dimensional phase diagram of SSH model)","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"Also, two-dimensional phase diagram is given by:","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"julia> param = range(-2.0, 2.0, length=101)\njulia> calcPhaseDiagram(H0, param, param, \"BerryPhase\"; plot=true)","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"(Image: Two-dimensional phase diagram of SSH model)","category":"page"},{"location":"examples_old/#Chern-numbers","page":"Examples","title":"Chern numbers","text":"","category":"section"},{"location":"examples_old/#Two-dimensional-square-lattice-with-flux-model","page":"Examples","title":"Two-dimensional square lattice with flux model","text":"","category":"section"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"A two-dimensional example is presented here:","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"julia> function H(k) # landau\n    k1, k2 = k\n    t = 1\n\n    Hsize = 6\n    Hmat = zeros(ComplexF64, Hsize, Hsize)\n\n    for i in 1:Hsize\n        Hmat[i, i] = -2*cos(k2-2pi*i/Hsize)\n    end\n\n    for i in 1:Hsize-1\n        Hmat[i, i+1] = -t\n        Hmat[i+1, i] = -t\n    end\n\n    Hmat[1, Hsize] = -t*exp(-im*k1)\n    Hmat[Hsize, 1] = -t*exp(im*k1)\n    \n    Hmat\nend","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"To calculate the dispersion, run:","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"julia> showBand(H; value=false, disp=true)","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"(Image: Dispersion of 2D square lattice with flux model)","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"Then we can compute the Chern numbers using calcChern:","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"julia> calcChern(H)","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"The output is:","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"(TopologicalNumber = [1, 1, -2, -2, 1, 1], Total = 0)","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"The first argument TopologicalNumber in the named tuple is an vector that stores the first Chern number for each band.  The vector is arranged in order of bands, starting from the one with the lowest energy. The second argument Total stores the total of the first Chern numbers for each band. Total is a quantity that should always return zero.","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"One-dimensional phase diagram is given by:","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"julia> function H(k, p)\n    k1, k2 = k\n    t = p\n\n    Hsize = 6\n    Hmat = zeros(ComplexF64, Hsize, Hsize)\n\n    for i in 1:Hsize\n        Hmat[i, i] = -2 * cos(k2 - 2pi * i / Hsize)\n    end\n\n    for i in 1:Hsize-1\n        Hmat[i, i+1] = -t\n        Hmat[i+1, i] = -t\n    end\n\n    Hmat[1, Hsize] = -t * exp(-im * k1)\n    Hmat[Hsize, 1] = -t * exp(im * k1)\n\n    Hmat\nend\n\njulia> param = range(-2.0, 2.0, length=500)\njulia> calcPhaseDiagram(H, param, \"Chern\"; plot=true)","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"(Image: One-dimensional phase diagram)","category":"page"},{"location":"examples_old/#\\mathbb{Z}_2-numbers","page":"Examples","title":"mathbbZ_2 numbers","text":"","category":"section"},{"location":"examples_old/#The-Bernevig-Hughes-Zhang-(BHZ)-model","page":"Examples","title":"The Bernevig-Hughes-Zhang (BHZ) model","text":"","category":"section"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"As an example of a two-dimensional topological insulator, the BHZ model is presented here:","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"julia> function H(k) # BHZ\n    k1, k2 = k\n    t = 1\n\n    R0 = -2(cos(k1) + cos(k2)) + 1\n    R3 = 2sin(k2)\n    R4 = 2sin(k1)\n    R5 = -2t*(cos(k1) + cos(k2)) + 1\n\n    s0 = [1 0; 0 1]\n    sx = [0 1; 1 0]\n    sy = [0 -im; im 0]\n    sz = [1 0; 0 -1]\n\n    a0 = kron(s0, s0)\n    a1 = kron(sx, sx)\n    a2 = kron(sx, sy)\n    a3 = kron(sx, sz)\n    a4 = kron(sy, s0)\n    a5 = kron(sz, s0)\n\n    R0*a0+R3*a3+R4*a4+R5*a5\nend","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"To calculate the dispersion, execute:","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"julia> showBand(H; value=false, disp=true)","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"(Image: Dispersion of BHZ model)","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"Next, we can compute the mathbbZ_2 numbers using calcZ2:","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"julia> calcZ2(H)","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"The output is:","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"(TopologicalNumber = [1, 1], Total = 0)","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"The first argument TopologicalNumber in the named tuple is an vector that stores the mathbbZ_2 number for each each pair of two energy bands.  The vector is arranged in order of bands, starting from the one with the lowest energy. The second argument Total stores the total of the mathbbZ_2 numbers for each pair of two energy bands. Total is a quantity that should always return zero.","category":"page"},{"location":"examples_old/","page":"Examples","title":"Examples","text":"Total is a value that should consistently return zero.","category":"page"},{"location":"2D/Haldane/#Haldane-model","page":"Haldane model","title":"Haldane model","text":"","category":"section"},{"location":"2D/Haldane/","page":"Haldane model","title":"Haldane model","text":"Hamiltonian of Haldane model is given by:","category":"page"},{"location":"2D/Haldane/","page":"Haldane model","title":"Haldane model","text":"julia> function H₀(k, p) # landau\n           k1, k2 = k\n           J = 1.0\n           K = 1.0\n           ϕ, M = p\n\n           h0 = 2K * cos(ϕ) * (cos(k1) + cos(k2) + cos(k1 + k2))\n           hx = J * (1 + cos(k1) + cos(k2))\n           hy = J * (-sin(k1) + sin(k2))\n           hz = M - 2K * sin(ϕ) * (sin(k1) + sin(k2) - sin(k1 + k2))\n\n           s0 = [1 0; 0 1]\n           sx = [0 1; 1 0]\n           sy = [0 -im; im 0]\n           sz = [1 0; 0 -1]\n\n           h0 .* s0 .+ hx .* sx .+ hy .* sy .+ hz .* sz\n       end","category":"page"},{"location":"2D/Haldane/","page":"Haldane model","title":"Haldane model","text":"The band structure is computed as follows:","category":"page"},{"location":"2D/Haldane/","page":"Haldane model","title":"Haldane model","text":"julia> H(k) = H₀(k, (π/3, 0.5))\njulia> showBand(H; value=false, disp=true)","category":"page"},{"location":"2D/Haldane/","page":"Haldane model","title":"Haldane model","text":"(Image: Band structure of Haldane model)","category":"page"},{"location":"2D/Haldane/","page":"Haldane model","title":"Haldane model","text":"Then we can compute the Chern numbers using calcChern:","category":"page"},{"location":"2D/Haldane/","page":"Haldane model","title":"Haldane model","text":"julia> calcChern(H)","category":"page"},{"location":"2D/Haldane/","page":"Haldane model","title":"Haldane model","text":"The output is:","category":"page"},{"location":"2D/Haldane/","page":"Haldane model","title":"Haldane model","text":"(TopologicalNumber = [1, -1], Total = 0)","category":"page"},{"location":"2D/Haldane/","page":"Haldane model","title":"Haldane model","text":"The first argument TopologicalNumber in the named tuple is an vector that stores the first Chern number for each band.  The vector is arranged in order of bands, starting from the one with the lowest energy. The second argument Total stores the total of the first Chern numbers for each band. Total is a quantity that should always return zero.","category":"page"},{"location":"2D/Haldane/","page":"Haldane model","title":"Haldane model","text":"One-dimensional phase diagram is given by:","category":"page"},{"location":"2D/Haldane/","page":"Haldane model","title":"Haldane model","text":"julia> H(k, p) = H₀(k, (p, 2.5))\n\njulia> param = range(-π, π, length=1000)\njulia> calcPhaseDiagram(H, param, \"Chern\"; plot=true)","category":"page"},{"location":"2D/Haldane/","page":"Haldane model","title":"Haldane model","text":"(Image: One-dimensional phase diagram of Haldane model)","category":"page"},{"location":"2D/Haldane/","page":"Haldane model","title":"Haldane model","text":"Also, two-dimensional phase diagram is given by:","category":"page"},{"location":"2D/Haldane/","page":"Haldane model","title":"Haldane model","text":"julia> param1 = range(-π, π, length=100)\njulia> param2 = range(-6.0, 6.0, length=100)\njulia> calcPhaseDiagram(H₀, param1, param2, \"Chern\"; plot=true)","category":"page"},{"location":"2D/Haldane/","page":"Haldane model","title":"Haldane model","text":"(Image: Two-dimensional phase diagram of Haldane model)","category":"page"},{"location":"lib/internal/#Internal","page":"Internal","title":"Internal","text":"","category":"section"},{"location":"lib/internal/","page":"Internal","title":"Internal","text":"Modules = [TopologicalNumbers]\nPublic = false","category":"page"},{"location":"2D/Kitaev-Honeycomb/#Kitaev-honeycomb-model","page":"Kitaev honeycomb model","title":"Kitaev honeycomb model","text":"","category":"section"},{"location":"2D/Kitaev-Honeycomb/","page":"Kitaev honeycomb model","title":"Kitaev honeycomb model","text":"Hamiltonian of Kitaev honeycomb model is given by:","category":"page"},{"location":"2D/Kitaev-Honeycomb/","page":"Kitaev honeycomb model","title":"Kitaev honeycomb model","text":"julia> function H₀(k, p) # Kitaev\n           k1, k2 = k\n           K, κ = p\n\n           hx = -κ * (sin(k2) - sin(k1) + sin(k1 - k2))\n           hy = K * (sin(k1) + sin(k2))\n           hz = K * (cos(k1) + cos(k2) + 1)\n\n           sx = [0 1; 1 0]\n           sy = [0 -im; im 0]\n           sz = [1 0; 0 -1]\n\n           hx .* sx .+ hy .* sy .+ hz .* sz\n       end","category":"page"},{"location":"2D/Kitaev-Honeycomb/","page":"Kitaev honeycomb model","title":"Kitaev honeycomb model","text":"The band structure is computed as follows:","category":"page"},{"location":"2D/Kitaev-Honeycomb/","page":"Kitaev honeycomb model","title":"Kitaev honeycomb model","text":"julia> H(k) = H₀(k, (1, 0.5))\njulia> showBand(H; value=false, disp=true)","category":"page"},{"location":"2D/Kitaev-Honeycomb/","page":"Kitaev honeycomb model","title":"Kitaev honeycomb model","text":"(Image: Band structure of Kitaev honeycomb model)","category":"page"},{"location":"2D/Kitaev-Honeycomb/","page":"Kitaev honeycomb model","title":"Kitaev honeycomb model","text":"Then we can compute the Chern numbers using calcChern:","category":"page"},{"location":"2D/Kitaev-Honeycomb/","page":"Kitaev honeycomb model","title":"Kitaev honeycomb model","text":"julia> calcChern(H)","category":"page"},{"location":"2D/Kitaev-Honeycomb/","page":"Kitaev honeycomb model","title":"Kitaev honeycomb model","text":"The output is:","category":"page"},{"location":"2D/Kitaev-Honeycomb/","page":"Kitaev honeycomb model","title":"Kitaev honeycomb model","text":"(TopologicalNumber = [1, -1], Total = 0)","category":"page"},{"location":"2D/Kitaev-Honeycomb/","page":"Kitaev honeycomb model","title":"Kitaev honeycomb model","text":"The first argument TopologicalNumber in the named tuple is an vector that stores the first Chern number for each band.  The vector is arranged in order of bands, starting from the one with the lowest energy. The second argument Total stores the total of the first Chern numbers for each band. Total is a quantity that should always return zero.","category":"page"},{"location":"2D/Kitaev-Honeycomb/","page":"Kitaev honeycomb model","title":"Kitaev honeycomb model","text":"One-dimensional phase diagram is given by:","category":"page"},{"location":"2D/Kitaev-Honeycomb/","page":"Kitaev honeycomb model","title":"Kitaev honeycomb model","text":"julia> H(k, p) = H₀(k, (1, p))\n\njulia> param = range(-1, 1, length=1000)\njulia> calcPhaseDiagram(H, param, \"Chern\"; plot=true)","category":"page"},{"location":"2D/Kitaev-Honeycomb/","page":"Kitaev honeycomb model","title":"Kitaev honeycomb model","text":"(Image: One-dimensional phase diagram of Kitaev honeycomb model)","category":"page"},{"location":"2D/Kitaev-Honeycomb/","page":"Kitaev honeycomb model","title":"Kitaev honeycomb model","text":"Also, two-dimensional phase diagram is given by:","category":"page"},{"location":"2D/Kitaev-Honeycomb/","page":"Kitaev honeycomb model","title":"Kitaev honeycomb model","text":"julia> param1 = range(-1.0, 1.0, length=100)\njulia> param2 = range(-1, 1, length=2)\njulia> calcPhaseDiagram(H₀, param1, param2, \"Chern\"; plot=true)","category":"page"},{"location":"2D/Kitaev-Honeycomb/","page":"Kitaev honeycomb model","title":"Kitaev honeycomb model","text":"(Image: Two-dimensional phase diagram of Kitaev honeycomb model)","category":"page"},{"location":"2D/BHZ/#The-Bernevig-Hughes-Zhang-(BHZ)-model","page":"BHZ model","title":"The Bernevig-Hughes-Zhang (BHZ) model","text":"","category":"section"},{"location":"2D/BHZ/","page":"BHZ model","title":"BHZ model","text":"As an example of a two-dimensional topological insulator, the BHZ model is presented here:","category":"page"},{"location":"2D/BHZ/","page":"BHZ model","title":"BHZ model","text":"julia> function H₀(k, p) # BHZ\n    k1, k2 = k\n    tₛₚ = 1\n    t₁ = ϵ₁ = 2\n    ϵ₂, t₂ = p\n\n    ϵ = -t₁*(cos(k1) + cos(k2)) + ϵ₁/2\n    R3 = 2tₛₚ*sin(k2)\n    R4 = 2tₛₚ*sin(k1)\n    R0 = -t₂*(cos(k1) + cos(k2)) + ϵ₂/2\n\n    s0 = [1 0; 0 1]\n    sx = [0 1; 1 0]\n    sy = [0 -im; im 0]\n    sz = [1 0; 0 -1]\n\n    I = Matrix{Int64}(I, 4, 4)\n    a1 = kron(sz, sx)\n    a2 = kron(sz, sy)\n    a3 = kron(sz, sz)\n    a4 = kron(sy, s0)\n    a0 = kron(sx, s0)\n\n    ϵ .* I .+ R1 .* a1 .+ R2 .* a2 .+ R3 .* a3 .+ R4 .* a4 .+ R0 .* a0\nend","category":"page"},{"location":"2D/BHZ/","page":"BHZ model","title":"BHZ model","text":"To calculate the dispersion, execute:","category":"page"},{"location":"2D/BHZ/","page":"BHZ model","title":"BHZ model","text":"julia> H(k) = H₀(k, (2, 2))\njulia> showBand(H; value=false, disp=true)","category":"page"},{"location":"2D/BHZ/","page":"BHZ model","title":"BHZ model","text":"(Image: Dispersion of BHZ model)","category":"page"},{"location":"2D/BHZ/","page":"BHZ model","title":"BHZ model","text":"Next, we can compute the mathbbZ_2 numbers using calcZ2:","category":"page"},{"location":"2D/BHZ/","page":"BHZ model","title":"BHZ model","text":"julia> calcZ2(H)","category":"page"},{"location":"2D/BHZ/","page":"BHZ model","title":"BHZ model","text":"The output is:","category":"page"},{"location":"2D/BHZ/","page":"BHZ model","title":"BHZ model","text":"(TopologicalNumber = [1, 1], Total = 0)","category":"page"},{"location":"2D/BHZ/","page":"BHZ model","title":"BHZ model","text":"The first argument TopologicalNumber in the named tuple is an vector that stores the mathbbZ_2 number for each pair of two energy bands.  The vector is arranged in order of bands, starting from the one with the lowest energy. The second argument Total stores the total of the mathbbZ_2 numbers for each pair of two energy bands. Total is a quantity that should always return zero.","category":"page"},{"location":"2D/BHZ/","page":"BHZ model","title":"BHZ model","text":"One-dimensional phase diagram is given by:","category":"page"},{"location":"2D/BHZ/","page":"BHZ model","title":"BHZ model","text":"julia> H(k, p) = H₀(k, (p, 0.25))\n\njulia> param = range(-2, 2, length=1000)\njulia> calcPhaseDiagram(H, param, \"Z2\"; plot=true)","category":"page"},{"location":"2D/BHZ/","page":"BHZ model","title":"BHZ model","text":"(Image: One-dimensional phase diagram of BHZ model)","category":"page"},{"location":"2D/BHZ/","page":"BHZ model","title":"BHZ model","text":"Also, two-dimensional phase diagram is given by:","category":"page"},{"location":"2D/BHZ/","page":"BHZ model","title":"BHZ model","text":"julia> param1 = range(-2, 2, length=100)\njulia> param2 = range(-0.5, 0.5, length=100)\njulia> calcPhaseDiagram(H₀, param1, param2, \"Z2\"; plot=true)","category":"page"},{"location":"2D/BHZ/","page":"BHZ model","title":"BHZ model","text":"(Image: Two-dimensional phase diagram of BHZ model)","category":"page"},{"location":"2D/Kane-Mele/#The-Kane-Mele-model","page":"Kane-Mele model","title":"The Kane-Mele model","text":"","category":"section"},{"location":"2D/Kane-Mele/","page":"Kane-Mele model","title":"Kane-Mele model","text":"As an example of a two-dimensional topological insulator, the Kane-Mele model is presented here:","category":"page"},{"location":"2D/Kane-Mele/","page":"Kane-Mele model","title":"Kane-Mele model","text":"julia> function H₀(k, p) # Kane-Mele\n    k1, k2 = k\n    t, λₛₒ = p\n\n    R1 = 0\n    R2 = 0\n    R3 = 2λₛₒ*(sin(k1) - sin(k2) - sin(k1-k2))\n    R4 = -t*(sin(k1) + sin(k2))\n    R0 = -t*(cos(k1) + cos(k2) + 1)\n\n    s0 = [1 0; 0 1]\n    sx = [0 1; 1 0]\n    sy = [0 -im; im 0]\n    sz = [1 0; 0 -1]\n\n    a1 = kron(sz, sx)\n    a2 = kron(sz, sy)\n    a3 = kron(sz, sz)\n    a4 = kron(sy, s0)\n    a0 = kron(sx, s0)\n\n    R1 .* a1 .+ R2 .* a2 .+ R3 .* a3 .+ R4 .* a4 .+ R0 .* a0\nend","category":"page"},{"location":"2D/Kane-Mele/","page":"Kane-Mele model","title":"Kane-Mele model","text":"To calculate the dispersion, execute:","category":"page"},{"location":"2D/Kane-Mele/","page":"Kane-Mele model","title":"Kane-Mele model","text":"julia> H(k) = H₀(k, (1, 0.5))\njulia> showBand(H; value=false, disp=true)","category":"page"},{"location":"2D/Kane-Mele/","page":"Kane-Mele model","title":"Kane-Mele model","text":"(Image: Dispersion of Kane-Mele model)","category":"page"},{"location":"2D/Kane-Mele/","page":"Kane-Mele model","title":"Kane-Mele model","text":"Next, we can compute the mathbbZ_2 numbers using calcZ2:","category":"page"},{"location":"2D/Kane-Mele/","page":"Kane-Mele model","title":"Kane-Mele model","text":"julia> calcZ2(H)","category":"page"},{"location":"2D/Kane-Mele/","page":"Kane-Mele model","title":"Kane-Mele model","text":"The output is:","category":"page"},{"location":"2D/Kane-Mele/","page":"Kane-Mele model","title":"Kane-Mele model","text":"(TopologicalNumber = [1, 1], Total = 0)","category":"page"},{"location":"2D/Kane-Mele/","page":"Kane-Mele model","title":"Kane-Mele model","text":"The first argument TopologicalNumber in the named tuple is an vector that stores the mathbbZ_2 number for each pair of two energy bands.  The vector is arranged in order of bands, starting from the one with the lowest energy. The second argument Total stores the total of the mathbbZ_2 numbers for each pair of two energy bands. Total is a quantity that should always return zero.","category":"page"},{"location":"2D/Kane-Mele/","page":"Kane-Mele model","title":"Kane-Mele model","text":"One-dimensional phase diagram is given by:","category":"page"},{"location":"2D/Kane-Mele/","page":"Kane-Mele model","title":"Kane-Mele model","text":"julia> H(k, p) = H₀(k, (p, 0.5))\n\njulia> param = range(-1.0, 1.0, length=1001)\njulia> calcPhaseDiagram(H, param, \"Z2\"; plot=true)","category":"page"},{"location":"2D/Kane-Mele/","page":"Kane-Mele model","title":"Kane-Mele model","text":"(Image: One-dimensional phase diagram of Kane-Mele model)","category":"page"},{"location":"2D/Kane-Mele/","page":"Kane-Mele model","title":"Kane-Mele model","text":"Also, two-dimensional phase diagram is given by:","category":"page"},{"location":"2D/Kane-Mele/","page":"Kane-Mele model","title":"Kane-Mele model","text":"julia> param = range(-1.0, 1.0, length=101)\njulia> calcPhaseDiagram(H₀, param, param, \"Z2\"; plot=true)","category":"page"},{"location":"2D/Kane-Mele/","page":"Kane-Mele model","title":"Kane-Mele model","text":"(Image: Two-dimensional phase diagram of Kane-Mele model)","category":"page"},{"location":"3D/Weyl/#Weyl-semimetal","page":"Weyl semimetal","title":"Weyl semimetal","text":"","category":"section"},{"location":"3D/Weyl/","page":"Weyl semimetal","title":"Weyl semimetal","text":"A three-dimensional example is presented here:","category":"page"},{"location":"3D/Weyl/","page":"Weyl semimetal","title":"Weyl semimetal","text":"julia> function H₀(k) # Weyl\n    k1, k2, k3 = k\n    t1 = 1\n    t2 = 1\n    t3 = 1\n    m = 2\n    k0 = 2pi*2/5\n\n    h0 = 0\n    hx = 2t1*(cos(k1) - cos(k0)) + m*(2 - cos(k2) - cos(k3))\n    hy = 2t2*sin(k2)\n    hz = 2t3*sin(k3)\n\n    s0 = [1 0; 0 1]\n    sx = [0 1; 1 0]\n    sy = [0 -im; im 0]\n    sz = [1 0; 0 -1]\n\n    h0 .* s0 .+ hx .* sx .+ hy .* sy .+ hz .* sz\nend","category":"page"},{"location":"1D/Kitaev-Chain/#The-Kitaev-chain-model","page":"Kitaev Chain","title":"The Kitaev chain model","text":"","category":"section"},{"location":"1D/Kitaev-Chain/","page":"Kitaev Chain","title":"Kitaev Chain","text":"Here's a simple example of the Kitaev chain Hamiltonian:","category":"page"},{"location":"1D/Kitaev-Chain/","page":"Kitaev Chain","title":"Kitaev Chain","text":"julia> using TopologicalNumbers\njulia> function H₀(k, p)\n            μ, Δ = p\n            t = 1\n\n            [\n                -μ-2t*cos(k) 2im*Δ*sin(k)\n                -2im*Δ*sin(k) μ+2t*cos(k)\n            ]\n        end","category":"page"},{"location":"1D/Kitaev-Chain/","page":"Kitaev Chain","title":"Kitaev Chain","text":"The band structure is computed as follows:","category":"page"},{"location":"1D/Kitaev-Chain/","page":"Kitaev Chain","title":"Kitaev Chain","text":"julia> H(k) = H₀(k, (-1.0, 0.5))\njulia> showBand(H; value=false, disp=true)","category":"page"},{"location":"1D/Kitaev-Chain/","page":"Kitaev Chain","title":"Kitaev Chain","text":"(Image: Band structure of Kitaev chain model)","category":"page"},{"location":"1D/Kitaev-Chain/","page":"Kitaev Chain","title":"Kitaev Chain","text":"Next, we can calculate the winding numbers using calcBerryPhase:","category":"page"},{"location":"1D/Kitaev-Chain/","page":"Kitaev Chain","title":"Kitaev Chain","text":"julia> calcBerryPhase(H)","category":"page"},{"location":"1D/Kitaev-Chain/","page":"Kitaev Chain","title":"Kitaev Chain","text":"The output is:","category":"page"},{"location":"1D/Kitaev-Chain/","page":"Kitaev Chain","title":"Kitaev Chain","text":"(TopologicalNumber = [1, 1], Total = 0)","category":"page"},{"location":"1D/Kitaev-Chain/","page":"Kitaev Chain","title":"Kitaev Chain","text":"The first argument TopologicalNumber in the named tuple is an vector that stores the winding number for each band.  The vector is arranged in order of bands, starting from the one with the lowest energy. The second argument Total stores the total of the winding numbers for each band (mod 2). Total is a quantity that should always return zero.","category":"page"},{"location":"1D/Kitaev-Chain/","page":"Kitaev Chain","title":"Kitaev Chain","text":"One-dimensional phase diagram is given by:","category":"page"},{"location":"1D/Kitaev-Chain/","page":"Kitaev Chain","title":"Kitaev Chain","text":"julia> H(k, p) = H₀(k, (p, 1.0))\n\njulia> param = range(-3.0, 0, length=601)\njulia> calcPhaseDiagram(H, param, \"BerryPhase\"; plot=true)","category":"page"},{"location":"1D/Kitaev-Chain/","page":"Kitaev Chain","title":"Kitaev Chain","text":"(Image: One-dimensional phase diagram of Kitaev chain model)","category":"page"},{"location":"1D/Kitaev-Chain/","page":"Kitaev Chain","title":"Kitaev Chain","text":"Also, two-dimensional phase diagram is given by:","category":"page"},{"location":"1D/Kitaev-Chain/","page":"Kitaev Chain","title":"Kitaev Chain","text":"julia> param1 = range(-3.0, 3.0, length=101)\njulia> param2 = range(-1.0, 1.0, length=101)\njulia> calcPhaseDiagram(H₀, param1, param2, \"BerryPhase\"; plot=true)","category":"page"},{"location":"1D/Kitaev-Chain/","page":"Kitaev Chain","title":"Kitaev Chain","text":"(Image: Two-dimensional phase diagram of Kitaev chain model)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = TopologicalNumbers","category":"page"},{"location":"#TopologicalNumbers.jl","page":"Home","title":"TopologicalNumbers.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TopologicalNumbers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TopologicalNumbers.jl is a Julia package designed to calculate topological numbers, such as the Chern numbers and mathbbZ_2 numbers,  using a numerical approach based on the Fukui-Hatsugai-Suzuki method [1], the Shiozaki method [2] or method of calculating the Weyl node [3],[4],[5],[6].","category":"page"},{"location":"","page":"Home","title":"Home","text":"This software is released under the MIT License, please see the LICENSE file for more details.   It is confirmed to work on Julia 1.6 (LTS) and 1.9.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install TopologicalNumbers.jl, run the following command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add TopologicalNumbers","category":"page"},{"location":"","page":"Home","title":"Home","text":"Alternatively, you can use:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"TopologicalNumbers\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nIf you are using a headless server, you may receive an error related to the GLMakie package. To resolve this issue, please refer to the Makie documentation or the GLMakie troubleshooting guide.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package includes the following functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"showBand to calculate the dispersion relation,\ncalcBerryPhase to calculate the winding numbers in the one-dimensional case,\ncalcChern to calculate the first Chern numbers in the two-dimensional case,\ncalcZ2 to calculate the mathbbZ_2 numbers in the two-dimensional case,\ncalcPhaseDiagram to calculate the phase diagram using the several methods,\ncalcBerryFlux to calculate the Berry flux in the two-dimensional case,\ncalcWeylNode to calculate the Weyl node in the three-dimensional case,\ncalcChernSurface to calculate the Chern numbers in the three-dimensional case,\nfindWeylPoint to find the Weyl points in the three-dimensional case.","category":"page"}]
}
