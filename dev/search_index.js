var documenterSearchIndex = {"docs":
[{"location":"internal/#API","page":"API","title":"API","text":"","category":"section"},{"location":"internal/","page":"API","title":"API","text":"","category":"page"},{"location":"internal/","page":"API","title":"API","text":"Modules = [TopologicalNumbers]","category":"page"},{"location":"internal/#TopologicalNumbers.Dispersion-Tuple{Function, Int64}","page":"API","title":"TopologicalNumbers.Dispersion","text":"Calculate the dispersion relation.\n\nDispersion(Hamiltonian::Function, dim::Int; N::Int=51, labels::Bool=true)\n\n\n\n\n\n\n\n","category":"method"},{"location":"internal/#TopologicalNumbers.FirstChern-Tuple{Function}","page":"API","title":"TopologicalNumbers.FirstChern","text":"Calculate the first Chern numbers in the two-dimensional case.\n\nFirstChern(Hamiltonian::Function; N::Int=51, gapless::Real=0.0, rounds::Bool=true)\n\n\n\n\n\n\n\n","category":"method"},{"location":"internal/#TopologicalNumbers.QuantizedBerryPhase-Tuple{Function}","page":"API","title":"TopologicalNumbers.QuantizedBerryPhase","text":"Calculate the winding numbers in the one-dimensional case.\n\nQuantizedBerryPhase(Hamiltonian::Function; N::Int=51, gapless::Real=0.0, rounds::Bool=true)\n\n\n\n\n\n\n\n","category":"method"},{"location":"internal/#TopologicalNumbers.Z2Invariants2D-Tuple{Function}","page":"API","title":"TopologicalNumbers.Z2Invariants2D","text":"Calculate the mathbbZ_2 numbers in the two-dimensional case.\n\nZ2Invariants2D(Hamiltonian::Function; N::Int=50, rounds::Bool=true)\n\n\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = TopologicalNumbers","category":"page"},{"location":"#TopologicalNumbers.jl","page":"Home","title":"TopologicalNumbers.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TopologicalNumbers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<!– # TopologicalNumbers.jl: A Julia package for calculating topological numbers –>","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TopologicalNumbers.jl is a Julia package designed to calculate topological numbers, such as the Chern numbers and mathbbZ_2 numbers,  using a numerical approach based on the Fukui-Hatsugai-Suzuki method or the Shiozaki method.   This package includes the following functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Dispersion to calculate the dispersion relation,\nQuantizedBerryPhase to calculate the winding numbers in the one-dimensional case,\nFirstChern to calculate the first Chern numbers in the two-dimensional case,\nZ2Invariants2D to calculate the mathbbZ_2 numbers in the two-dimensional case.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This software is released under the MIT License, please see the LICENSE file for more details.   It is confirmed to work on Julia 1.6 (LTS) and 1.9.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install TopologicalNumbers.jl, run the following command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"]add https://github.com/KskAdch/TopologicalNumbers.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Alternatively, you can use:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"https://github.com/KskAdch/TopologicalNumbers.jl\")","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"#The-Su-Schriffer-Heeger-(SSH)-model","page":"Home","title":"The Su-Schriffer-Heeger (SSH) model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here's a simple example of the SSH Hamiltonian:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using TopologicalNumbers\njulia> function H(k) # set SSH Hamiltonian function of wavenumber k\n    g = 0.9\n    \n    [\n        0 g+exp(-im*k)\n        g+exp(im*k) 0\n    ]\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"The band structure is computed as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> Dispersion(H, 1)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Band structure of SSH model)","category":"page"},{"location":"","page":"Home","title":"Home","text":"In this case, 1 signifies the dimension of the wavenumber space.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Next, we can calculate the winding numbers using QuantizedBerryPhase:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> QuantizedBerryPhase(H)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The output is:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(TopologicalNumber = [1, 1], Total = 0)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The first argument TopologicalNumber in the named tuple is an vector that stores the winding number for each band.  The vector is arranged in order of bands, starting from the one with the lowest energy. The second argument Total stores the total of the winding numbers for each band (mod 2). Total is a quantity that should always return zero.","category":"page"},{"location":"#Two-dimensional-square-lattice-with-flux-model","page":"Home","title":"Two-dimensional square lattice with flux model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A two-dimensional example is presented here:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> function H(k) # landau\n    k1, k2 = k\n    t = 1\n\n    Hsize = 6\n    Hmat = zeros(ComplexF64, Hsize, Hsize)\n\n    for i in 1:Hsize\n        Hmat[i, i] = -2*cos(k2-2pi*i/Hsize)\n    end\n\n    for i in 1:Hsize-1\n        Hmat[i, i+1] = -t\n        Hmat[i+1, i] = -t\n    end\n\n    Hmat[1, Hsize] = -t*exp(-im*k1)\n    Hmat[Hsize, 1] = -t*exp(im*k1)\n    \n    Hmat\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"To calculate the Dispersion, run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> Dispersion(H, 2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Dispersion of 2D square lattice with flux model)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then we can compute the Chern numbers using FirstChern:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> FirstChern(H)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The output is:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(TopologicalNumber = [1, 1, -2, -2, 1, 1], Total = 0)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The first argument TopologicalNumber in the named tuple is an vector that stores the first Chern number for each band.  The vector is arranged in order of bands, starting from the one with the lowest energy. The second argument Total stores the total of the first Chern numbers for each band. Total is a quantity that should always return zero.","category":"page"},{"location":"#The-Bernevig-Hughes-Zhang-(BHZ)-model","page":"Home","title":"The Bernevig-Hughes-Zhang (BHZ) model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"As an example of a two-dimensional topological insulator, the BHZ model is presented here:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> function H(k) # BHZ\n    k1, k2 = k\n    t = 1\n\n    R0 = -2(cos(k1) + cos(k2)) + 1\n    R3 = 2sin(k2)\n    R4 = 2sin(k1)\n    R5 = -2t*(cos(k1) + cos(k2)) + 1\n\n    s0 = [1 0; 0 1]\n    sx = [0 1; 1 0]\n    sy = [0 -im; im 0]\n    sz = [1 0; 0 -1]\n\n    a0 = kron(s0, s0)\n    a1 = kron(sx, sx)\n    a2 = kron(sx, sy)\n    a3 = kron(sx, sz)\n    a4 = kron(sy, s0)\n    a5 = kron(sz, s0)\n\n    R0*a0+R3*a3+R4*a4+R5*a5\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"To calculate the Dispersion, execute:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> Dispersion(H, 2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Dispersion of BHZ model)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Next, we can compute the mathbbZ_2 numbers using Z2Invariants2D:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> Z2Invariants2D(H)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The output is:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(TopologicalNumber = [1 1 1 1; 1 1 1 1], Total = 0)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This implies... (edit required)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Total is a value that should consistently return zero.","category":"page"}]
}
